name: CI/CD with Gradle

on:
  push:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'adoptium'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: application.yml 파일 생성
        run: |
          cd ./src/main/resources
          touch ./application.yml
          echo "${{ secrets.PROPERTIES }}" > ./application.yml
        shell: bash

      - name: Gradle Build 실행 (권한 부여)
        run: chmod +x gradlew

      - name: Gradle Build
        run: ./gradlew build
        shell: bash

      - name: NCP Container Registry 로그인 & Docker Build (amd64)
        run: |
          docker login -u ${{ secrets.NCP_API_ACCESS_KEY }} -p ${{ secrets.NCP_API_SECRET_KEY }} ${{ secrets.NCP_CONTAINER_REGISTRY_PUBLIC_ENDPOINT }}
          docker build --platform linux/amd64 -t ${{ secrets.NCP_CONTAINER_REGISTRY_PUBLIC_ENDPOINT }}/${{ secrets.NCP_CONTAINER_REGISTRY_IMAGE }} .
          docker push ${{ secrets.NCP_CONTAINER_REGISTRY_PUBLIC_ENDPOINT }}/${{ secrets.NCP_CONTAINER_REGISTRY_IMAGE }}

      - name: NCP Server에서 Docker Pull & 배포
        uses: appleboy/ssh-action@master
        with:
          username: ${{ secrets.NCP_SERVER_USERNAME }}
          host: ${{ secrets.NCP_SERVER_HOST }}
          password: ${{ secrets.NCP_SERVER_PASSWORD }}
          script: |
            sudo docker login -u ${{ secrets.NCP_API_ACCESS_KEY }} -p ${{ secrets.NCP_API_SECRET_KEY }} ${{ secrets.NCP_CONTAINER_REGISTRY_PUBLIC_ENDPOINT }}
            sudo docker pull ${{ secrets.NCP_CONTAINER_REGISTRY_PUBLIC_ENDPOINT }}/${{ secrets.NCP_CONTAINER_REGISTRY_IMAGE }}
            docker ps -qa | xargs -r docker rm -f
            docker compose up -d
            docker image prune -f
